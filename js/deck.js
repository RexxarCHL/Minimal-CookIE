// Generated by CoffeeScript 1.7.1
var addThisRecipeToDeck, checkRecipeInDB, checkRecipeInDeck, deleteThisRecipeFromDeck, findRecipeIdsInDeck;

addThisRecipeToDeck = function(id) {
  console.log("Add recipe #" + id + " to deck");

  /* Push if not already in deck */
  if (window.recipesInDeck.lastIndexOf(id) === -1) {
    window.recipesInDeck.push(id);
    AddRecipeValue(id);
  }
};

deleteThisRecipeFromDeck = function(id) {

  /* TODO */
  console.log("delete " + id + " from deck");

  /* delete from DB */
  deleteRecipe(id);
  checkRecipeInDB();
  loadDeck();
};

findRecipeIdsInDeck = function() {
  var recipeIds;
  recipeIds = [];
  $('#main_Deck').find('.recipe_item').forEach(function(elem) {
    return recipeIds.push(elem.getAttribute('data-recipe-id'));
  });
  console.log(recipeSelectedId);
  return recipeIds;
};

checkRecipeInDeck = function(id) {
  if (window.recipesInDeck.lastIndexOf(id) === -1) {
    return false;
  } else {
    return true;
  }
};

checkRecipeInDB = function() {
  var sql;
  if (!window.openDatabase) {
    alert('Databases are not supported in this browser.');
    return;
  }
  sql = 'SELECT `recipeId` FROM `Recipes`';
  window.recipesInDeck = [];
  db.transaction(function(transaction) {
    transaction.executeSql(sql, [], function(transaction, result) {
      var i, row, x, _i, _len, _ref;
      if ((result != null) && (result.rows != null)) {

        /* There is recipe in deck */
        console.log("OK");
        _ref = result.rows;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          x = _ref[i];
          row = result.rows.item(i);
          window.recipesExist = 1;
          console.log(row.recipeId);
          window.recipesInDeck.push(row.recipeId);
        }
        return;
      }
      console.log("NOT OK");
      return window.recipesExist = 0;
    }, errorHandler);
  }, errorHandler, nullHandler);
};
