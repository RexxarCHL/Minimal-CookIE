// Generated by CoffeeScript 1.7.1

/* Class Definitions */
var Step, checkFinishPercentageAndChangeTitle, checkNextStep, cookingEnded, cookingStarted, finishedShowStatus, loadStep, startTimer, stopTimer, timer;

Step = (function() {
  function Step(stepNum, startTime, duration, recipeName, digest, people) {
    this.stepNum = stepNum;
    this.startTime = startTime;
    this.duration = duration;
    this.recipeName = recipeName;
    this.digest = digest;
    this.people = people;
    this.finishTime = this.startTime + this.duration;
    this.timeElapsed = 0;
    this.percentage = "";
    return;
  }

  Step.prototype.calculateRemainTime = function() {
    return this.remainTime = this.duration - this.timeElapsed;
  };

  Step.prototype.calculatePercentage = function() {
    var remainTime;
    remainTime = this.calculateRemainTime();
    this.percentage = Math.floor(remainTime / this.duration * 100);
    return this.percentage + "%";
  };

  return Step;

})();


/* Function definitions */

cookingStarted = function() {

  /* Check if cooking data exist. It should exist when this is called but check anyways. */
  var currentStepNum;
  if (window.cookingData == null) {
    return;
  }
  currentStepNum = window.currentStepNum;
  window.currentTime = 0;
  window.waitingStepQueue = [];
  console.log("cooking started");
  $(".step_next_btn").html("Next");
  $(".waiting_step_outer_wrapper").addClass('invisible');
  checkFinishPercentageAndChangeTitle();
  $("#Step").attr("data-title", "Step " + (currentStepNum + 1) + " (" + finishPercentage + "%)");
  loadStep(currentStepNum);
  setTimeout(function() {
    return timer();
  }, 1000);
};

cookingEnded = function() {
  return stopTimer();
};


/* Timer: for clocking the cook process */

timer = function() {
  window.currentTime = window.currentTime + 1;
  window.waitingStepQueue.forEach(function(step) {
    step.timeElapsed += 1;
    return step.calculateRemainTime();
  });
  checkProgress();
  showTwoUrgentSteps();
  startTimer();
};

startTimer = function() {
  clearTimeout(window.lastId);
  window.lastId = setTimeout(function() {
    return timer();
  }, 1000);
};

stopTimer = function() {
  return clearTimeout(window.lastId);
};


/* Steps */

loadStep = function(stepNum) {
  var nextStep, scope, thisStep;
  console.log("load step#" + stepNum);
  thisStep = window.cookingData.steps[stepNum];
  window.currentStep = Step(stepNum, parseInt(thisStep.startTime), convertTimeToSeconds(thisStep.time), thisStep.recipeName, thisStep.stepName, thisStep.people);
  window.currentStepNum = stepNum;
  checkFinishPercentageAndChangeTitle();
  scope = $("#Step");
  scope.find(".this_step_recipe_name").html(thisStep.recipeName);
  scope.find(".this_step_digest").html(thisStep.digest);
  nextStep = window.cookingData.steps[stepNum + 1];
  if (nextStep != null) {
    scope.find(".next_step_name").html(nextStep.stepName);
    scope.find(".next_step_time").html(thisStep.time);
  } else {
    scope.find(".next_step_name").html("Final Step Reached");
    scope.find(".next_step_time").html("00:00");
    scope.find(".step_next_btn").html("Finish ");
  }
  scope.find(".step_next_btn").unbind('click');
  scope.find(".step_next_btn").click(function() {
    checkNextStep();
  });
};

checkNextStep = function() {
  var ans, currentTime, nextStep, thisStep, thisStepFinishTime, timeDiff;
  currentTime = window.currentTime;
  thisStep = window.currentStep;
  thisStepFinishTime = thisStep.finishTime;
  if ((nextStep = window.cookingData.steps[thisStep.stepNum + 1]) != null) {
    if ((timeDiff = nextStep.startTime - thisStepFinishTime) > 0) {
      ans = false;
      if (ans === false) {
        window.waitingStepQueue.forEach(function(step) {
          step.timeElapsed += timeDiff;
          return step.calculateRemainTime();
        });
        window.currentTime = nextStep.startTime;
        loadStep(thisStep.stepNum + 1);
      }
      return;
    }
  } else {
    console.log("finished");
    $.ui.loadContent("Finish");
    return;
  }
  if (thisStepFinishTime - currentTime <= 30) {
    console.log("<=30, time=" + thisStepFinishTime);
    window.currentTime = thisStepFinishTime;
  } else if (thisStep.people === true) {
    console.log(">30 and people=true, currentTime=" + currentTime + ", time=" + thisStepFinishTime);
    ans = true;
    if (ans === true) {
      window.currentTime = thisStepFinishTime;
    } else {
      return;
    }
  } else {
    console.log(">30, endtime=" + thisStepFinishTime);
    pushStepToWaitingQueue(thisStep, currentTime);
    window.currentTime = currentTime + 30;
  }
  checkProgress();
  loadStep(thisStep.stepNum + 1);
};

checkFinishPercentageAndChangeTitle = function() {
  var finishPercentage, stepNum;
  stepNum = window.currentStepNum;
  finishPercentage = Math.ceil((stepNum + 1) / window.cookingData.steps.length * 100);
  $.ui.setTitle("Step " + (stepNum + 1) + " (" + finishPercentage + "%)");
};

finishedShowStatus = function() {
  var scope, timeElapsed;
  timeElapsed = parseSecondsToTime(window.currentTime);
  scope = $("#Finish");
  scope.find("#TotalTimeSpent").html(timeElapsed);
  scope.find("#OriginalTime").html(window.cookingData.originTime);
};
