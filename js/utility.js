// Generated by CoffeeScript 1.7.1
var addInfiniteScroll, addThisRecipeToDeck, checkRecipeInDeck, convertTimeToSeconds, deleteSelectedRecipesFromDeck, findChosenRecipeId, loadRecipes, parseSecondsToTime, parseTimeToMinutes, recipeAjaxd, resetSelectedRecipe;

$(document).ready(function() {});

addInfiniteScroll = function(scope, delay, callback) {
  var scrollerList;
  console.log("add infinite-scroll to scope:" + scope[0].id);
  scrollerList = scope.scroller();
  scrollerList.clearInfinite();
  scrollerList.addInfinite();
  $.bind(scrollerList, 'infinite-scroll', function() {
    console.log(scope[0].id + " infinite-scroll");
    scope.find("#infinite").text("Loading more...");
    scrollerList.addInfinite();
    clearTimeout(window.lastId);
    return window.lastId = setTimeout(function() {
      return callback();
    }, delay);
  });
};

deleteSelectedRecipesFromDeck = function() {

  /* TODO */
};

recipeAjaxd = 0;

loadRecipes = function() {
  var scope;
  scope = $('#main_Browse_Recipe');
  scope.find('#Results').html("");
  scope.find("#infinite").text("Reloading...");
  recipeAjaxd = 0;
  getRecipes(recipeAjaxd);
};

findChosenRecipeId = function() {

  /* TODO */
  var recipeSelectedId;
  recipeSelectedId = [];
  $('#main_Kitchen_Recipes').find('.chosen').forEach(function(elem) {
    return recipeSelectedId.push(elem.getAttribute('data-recipe-id'));
  });
  console.log(recipeSelectedId);
  return recipeSelectedId;
};

addThisRecipeToDeck = function(id) {

  /* TODO */
  var html, leftright, scope;
  console.log("Add recipe #" + id + " to deck");
  window.recipesInDeck.push(id);
  html = $("#Recipe" + id).html();
  scope = $("#main_Deck").find("#Results");
  scope.find("#bottomBar").remove();
  if (scope.length % 2) {
    leftright = 'left';
  } else {
    leftright = 'right';
  }
  scope.append("<div class='kitchen_recipe_item " + leftright + "' data-recipe-id='" + id + "'>" + html + "</div>");

  /* Add bottomBar to maintain the scroller */
  return scope.append('<div id="bottomBar" style="display:block;height:0;clear:both;"> </div>');
};

checkRecipeInDeck = function(id) {
  console.log("index for  " + id + " is " + (window.recipesInDeck.lastIndexOf(id)));
  if (window.recipesInDeck.lastIndexOf(id) === -1) {
    return false;
  } else {
    return true;
  }
};

resetSelectedRecipe = function() {

  /* TODO */
};

parseTimeToMinutes = function(time) {
  time = time.split(":");
  return time = parseInt(time[0]) * 60 + parseInt(time[1]) + parseInt(time[2]) / 60;
};

convertTimeToSeconds = function(time) {
  time = time.split(":");
  return time = parseInt(time[0]) * 3600 + parseInt(time[1]) * 60 + parseInt(time[2]);
};

parseSecondsToTime = function(seconds) {
  var hour, min;
  hour = Math.floor(seconds / 3600);
  seconds %= 3600;
  hour = hour < 10 ? "0" + hour : hour;
  min = Math.floor(seconds / 60);
  seconds %= 60;
  min = min < 10 ? "0" + min : min;
  seconds = seconds < 10 ? "0" + seconds : seconds;
  return "" + hour + ":" + min + ":" + seconds;
};
